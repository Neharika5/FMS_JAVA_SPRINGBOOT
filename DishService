package com.spring_rest_jpa.service;

import com.spring_rest_jpa.dto.DishDTO;
import com.spring_rest_jpa.model.Dish;
import com.spring_rest_jpa.repository.DishRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class DishService {

    @Autowired
    private DishRepository dishRepository;

    // ====== Simple Mappers ======
    private DishDTO toDTO(Dish dish) {
        DishDTO dto = new DishDTO();
        dto.setId(dish.getDishId());
        dto.setName(dish.getName());
        dto.setPrice(dish.getPrice());
        dto.setCuisineName(dish.getCuisine() != null ? dish.getCuisine().getName() : null);
        return dto;
    }

    private Dish toEntity(DishDTO dto) {
        Dish dish = new Dish();
        dish.setDishId(dto.getId());
        dish.setName(dto.getName());
        dish.setPrice(dto.getPrice());
        // skipping cuisine/ingredients/chefs for simplicity
        return dish;
    }

    // ====== CRUD Methods ======
    public List<DishDTO> getAllDishes() {
        return dishRepository.findAll()
                .stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

    public Optional<DishDTO> getDish(int id) {
        return dishRepository.findById(id).map(this::toDTO);
    }

    public DishDTO addDish(DishDTO dto) {
        Dish saved = dishRepository.saveAndFlush(toEntity(dto));
        return toDTO(saved);
    }

    public DishDTO updateDish(DishDTO dto) {
        Dish updated = dishRepository.save(toEntity(dto));
        return toDTO(updated);
    }

    public void deleteDish(int id) {
        dishRepository.deleteById(id);
    }
}
