package com.example.demo.service;

import com.example.demo.dto.DishDto;
import com.example.demo.model.Dish;
import com.example.demo.repository.DishRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class DishService {

    @Autowired
    private DishRepository dishRepository;

    // --- Mapping Methods ---
    private DishDto toDto(Dish dish) {
        return new DishDto(dish.getDishId(), dish.getName(), dish.getDescription());
    }

    private Dish toEntity(DishDto dto) {
        return new Dish(dto.getDishId(), dto.getName(), dto.getDescription());
    }

    // --- CRUD Methods ---
    public List<DishDto> getAllDishes() {
        return dishRepository.findAll()
                .stream()
                .map(this::toDto)   // entity â†’ dto
                .collect(Collectors.toList());
    }

    public Optional<DishDto> getDishById(int dishId) {
        return dishRepository.findById(dishId)
                .map(this::toDto);   // convert only if found
    }

    public DishDto createDish(DishDto dishDto) {
        Dish dish = toEntity(dishDto);
        Dish savedDish = dishRepository.save(dish);
        return toDto(savedDish);
    }

    public DishDto updateDish(int dishId, DishDto dishDto) {
        return dishRepository.findById(dishId)
                .map(existing -> {
                    existing.setName(dishDto.getName());
                    existing.setDescription(dishDto.getDescription());
                    return toDto(dishRepository.save(existing));
                })
                .orElseThrow(() -> new RuntimeException("Dish not found with id " + dishId));
    }

    public void deleteDish(int dishId) {
        dishRepository.deleteById(dishId);
    }
}
