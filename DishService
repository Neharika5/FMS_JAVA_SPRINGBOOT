package com.spring_rest_jpa.service;

import com.spring_rest_jpa.dto.DishDTO;
import com.spring_rest_jpa.model.Dish;
import com.spring_rest_jpa.repository.DishRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class DishService {

    @Autowired
    private DishRepository dishRepository;

    // ====== Simple Mappers ======
    private DishDTO toDTO(Dish dish) {
        DishDTO dto = new DishDTO();
        dto.setId(dish.getDishId());
        dto.setName(dish.getName());
        dto.setPrice(dish.getPrice());
        dto.setCuisineName(dish.getCuisine() != null ? dish.getCuisine().getName() : null);
        return dto;
    }

    private Dish toEntity(DishDTO dto) {
        Dish dish = new Dish();
        dish.setDishId(dto.getId());
        dish.setName(dto.getName());
        dish.setPrice(dto.getPrice());
        // skipping cuisine/ingredients/chefs for simplicity
        return dish;
    }

    // ====== CRUD Methods ======
    public List<DishDTO> getAllDishes() {
        return dishRepository.findAll()
                .stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

    public Optional<DishDTO> getDish(int id) {
        return dishRepository.findById(id).map(this::toDTO);
    }

    public DishDTO addDish(DishDTO dto) {
        Dish saved = dishRepository.saveAndFlush(toEntity(dto));
        return toDTO(saved);
    }

    public DishDTO updateDish(DishDTO dto) {
        Dish updated = dishRepository.save(toEntity(dto));
        return toDTO(updated);
    }

    public void deleteDish(int id) {
        dishRepository.deleteById(id);
    }
}
package com.spring_rest_jpa.service;

import com.spring_rest_jpa.dto.DishDto;       // <-- use DishDto
import com.spring_rest_jpa.model.Dish;
import com.spring_rest_jpa.repository.DishRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class DishService {

    @Autowired
    private DishRepository dishRepository;

    // ===== Simple mappers (flat) =====
    private DishDto toDto(Dish dish) {
        DishDto dto = new DishDto();
        dto.setId(dish.getDishId());
        dto.setName(dish.getName());
        dto.setPrice(dish.getPrice());
        dto.setCuisineName(dish.getCuisine() != null ? dish.getCuisine().getName() : null);
        // keeping ingredients/chefs null or empty to stay simple
        return dto;
    }

    private void copyFromDto(DishDto dto, Dish entity) {
        entity.setName(dto.getName());
        entity.setPrice(dto.getPrice());
        // not touching cuisine / relations in this simple version
    }

    // ===== CRUD =====
    public List<DishDto> getAll() {
        return dishRepository.findAll()
                .stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    public DishDto getById(Integer id) {
        Dish dish = dishRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Dish not found: " + id));
        return toDto(dish);
    }

    public DishDto create(DishDto dto) {
        Dish dish = new Dish();
        copyFromDto(dto, dish);
        Dish saved = dishRepository.save(dish);
        return toDto(saved);
    }

    public DishDto update(Integer id, DishDto dto) {
        Dish dish = dishRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Dish not found: " + id));
        copyFromDto(dto, dish);
        Dish updated = dishRepository.save(dish);
        return toDto(updated);
    }

    public void delete(Integer id) {
        dishRepository.deleteById(id);
    }

    // ===== Optional filters using your repository =====
    public List<DishDto> findByCuisine(String cuisineName) {
        return dishRepository.findByCuisine_Name(cuisineName)
                .stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    public List<DishDto> findByIsVegetarian(Boolean isVegetarian) {
        return dishRepository.findByIsVegetarian(isVegetarian)
                .stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }
}
